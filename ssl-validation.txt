#!/usr/bin/env bash
# Run: bash tls_dns_seq.sh domains.txt results.txt
# Env knobs (optional):
#   PORT=443 ATTEMPTS=3 VERBOSE=0 SLEEP_BETWEEN=0

set -euo pipefail

DOMAINS_FILE="${1:-domains.txt}"
OUT_FILE="${2:-scan_$(date +%Y%m%d_%H%M%S).txt}"

PORT="${PORT:-443}"
ATTEMPTS="${ATTEMPTS:-3}"      # number of s_client runs per domain
VERBOSE="${VERBOSE:-0}"        # 0 = use -brief, 1 = full output
SLEEP_BETWEEN="${SLEEP_BETWEEN:-0}"   # seconds to sleep between attempts

if [[ ! -f "$DOMAINS_FILE" ]]; then
  echo "Domains file not found: $DOMAINS_FILE" >&2
  exit 1
fi

# s_client flags (add SNI with -servername)
SCLIENT_FLAGS=( -connect "" -servername "" -showcerts )
[[ "$VERBOSE" -eq 0 ]] && SCLIENT_FLAGS=( -connect "" -servername "" -brief -showcerts )

# build domain list: strip comments/blanks, de-dupe, keep original order of first appearance
declare -A seen
mapfile -t DOMAINS < <(sed -E 's/#.*$//' "$DOMAINS_FILE" | awk 'NF')
ORDERED=()
for d in "${DOMAINS[@]}"; do
  # normalize whitespace
  d="$(echo -n "$d" | tr -d '\r' )"
  [[ -n "${seen[$d]:-}" ]] && continue
  seen[$d]=1
  ORDERED+=("$d")
done

echo "Writing to: $OUT_FILE"
: > "$OUT_FILE"

for domain in "${ORDERED[@]}"; do
  {
    printf '==================== %s:%s ====================\n' "$domain" "$PORT"
    date -u +"Start: %Y-%m-%dT%H:%M:%SZ"
    echo

    # --- TLS: openssl s_client (ATTEMPTS times), sequential
    for (( i=1; i<=ATTEMPTS; i++ )); do
      printf -- '--- %s:%s | attempt %d ---\n' "$domain" "$PORT" "$i"
      args=( "${SCLIENT_FLAGS[@]}" )
      args[1]="${domain}:${PORT}"
      args[3]="${domain}"
      # stdin closed so it won't wait for keystrokes
      if ! openssl s_client "${args[@]}" </dev/null; then
        echo "[WARN] ${domain} attempt ${i}: openssl failed."
      fi
      echo
      (( SLEEP_BETWEEN > 0 )) && sleep "$SLEEP_BETWEEN"
    done

    # --- DNS: nslookup (once per domain), sequential
    echo ">>> nslookup ${domain}"
    if command -v nslookup >/dev/null 2>&1; then
      if ! nslookup "$domain"; then
        echo "[WARN] nslookup failed."
      fi
    else
      echo "[ERROR] nslookup not found on this system."
    fi
    echo

    date -u +"End:   %Y-%m-%dT%H:%M:%SZ"
    printf '================== end %s:%s ==================\n\n' "$domain" "$PORT"
  } >> "$OUT_FILE"
done

echo "Done."
